import Actor from "../logic/actor.mjs";
import { GoogleGenAI, Modality } from "@google/genai";
import dotenv from "dotenv";
import cleanJSON from 'cleanllmjson';
import Bot from "../../model/bot.mjs"; // Import the Bot model
import mongoose from "mongoose";
import User from "../../model/user.mjs"; // Import the User model

dotenv.config();

const ai = new GoogleGenAI({
    apiKey: process.env.GOOGLE_GENAI_API_KEY,
});

export async function generateActorPersona() {
    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.0-flash',
            contents: "Generate a unique, natural persona of varying age(10-70), gender, and region (e.g., Asia, Subcontinent, Central Asia, Europe, Americas, Australia etc.), avoiding stereotypes and different body types and physical apperances.",
            config: { temperature: 1.95, systemInstruction: process.env.GENERATE_ACTOR_INSTRUCTS }
        });

        const cleanedResponse = cleanJSON(response.text);
        console.log('Cleaned Response:', cleanedResponse);

        // Extract the relevant fields from the cleaned response
        const name = cleanedResponse.Name;
        const username = cleanedResponse.Username;
        const age = cleanedResponse.Age;
        const gender = cleanedResponse.Gender;
        const nationality = cleanedResponse.Nationality;
        const ethnicity = cleanedResponse.Ethnicity;
        const culturalBackground = cleanedResponse.Cultural_Background;
        const occupation = cleanedResponse.Occupation;
        const education = cleanedResponse.Education;
        const skills = cleanedResponse.Skills;
        const hobbies = cleanedResponse.Hobbies;
        const interests = cleanedResponse.Interests;
        const physical_description = cleanedResponse.Physical_Description;
        const generalDisposition = cleanedResponse.General_Disposition;
        const religion_beliefs = cleanedResponse.Religion_Beliefs;
        const personality_type = cleanedResponse.Personality_Type;
        const personality_traits = cleanedResponse.Key_Personality_Traits;
        const strengths = cleanedResponse.Strengths;
        const weaknesses = cleanedResponse.Weaknesses;
        const communication_style = cleanedResponse.Communication_Style;
        const values_and_core_beliefs = cleanedResponse.Values_And_Core_Beliefs;
        const aspirations_and_goals = cleanedResponse.Aspiration_And_Goals;
        const challenges_and_struggles = cleanedResponse.Challenges_And_Struggles;
        const family_details = cleanedResponse.Family_Details;
        const social_circle = cleanedResponse.Social_Circle;
        const dailyLifeSnippet = cleanedResponse.Daily_Life_Snippet;
        const quirksAndHabits = cleanedResponse.Quirks_And_Habits;
        const briefBackstory = cleanedResponse.Brief_Backstory;

        const build = physical_description.Build;
        const height = physical_description.Height;
        const hair = physical_description.Hair;
        const eyes = physical_description.Eyes;
        const distinguished_features = physical_description.Distinguished_Features;
        const style = physical_description.Style;

        const profilePicture = await generateActorProfileImage(build, height, hair, eyes, distinguished_features, style, age, gender, ethnicity, religion_beliefs)

        const actor = new Bot({
            name,username, age, gender, nationality, ethnicity, culturalBackground, occupation, education, skills, hobbies, interests,
            physicalDescription: {
                build, height, hair, eyes, distinguished_features, style
            },
            profilePicture,
            generalDisposition, religionBeliefs: religion_beliefs, personalityType: personality_type,
            keyPersonalityTraits: personality_traits, strengths, weaknesses, communicationStyle: communication_style,
            valuesAndCoreBeliefs: values_and_core_beliefs, aspirationsAndGoals: aspirations_and_goals,
            challengesAndStruggles: challenges_and_struggles, familyDetails: family_details,
            socialCircle: social_circle, dailyLifeSnippet, quirksAndHabits, briefBackstory,
            userId: new mongoose.Types.ObjectId(), // Generate a new ObjectId for the userId
            
        });

        const botUser = new User({
            _id: actor.userId, // Use the same ObjectId as the bot
            name: name,
            email: `${username}@gmail.com`,
            username: username,
            isBot: true,
            password: "password", // Default password for the bot user
            authType: "credentials",
            profilePicture: profilePicture,
            bio: "This is a bot user generated by the system.",
            verified: true,
            communities: [], // Add default communities if needed
            moderatedCommunities: [], // Add default moderated communities if needed
        });

        // Save the bot user to the database
        await botUser.save();

        // Link the bot user to the actor
        actor.userId = botUser._id;
        // Save the actor to the database
        await actor.save();
        if (actor) {
            console.log('Actor generated and saved successfully:', actor);
        } else {
            console.log('Failed to generate actor.');
        }

    } catch (error) {
        console.error('Error generating actor:', error);
    }
}

export async function generateActorProfileImage(build, height, hair, eyes, distinguished_features, style, age, gender, ethnicity, religion) {
    try {
        const content = `Generate a 1:1 aspect ratio hyperrealistic picture proper lightning and interesting pose for instagram of a ${age} year old ${ethnicity} ${religion} ${gender} with physical appearance of: build: ${build},height: ${height}, hair: ${hair},eyes: ${eyes}, features: ${distinguished_features}, style: ${style}. The image should be realistic and suitable for a profile picture. Also add a nice and realistic background.`;
        const response = await ai.models.generateContent({
            model: 'gemini-2.0-flash-preview-image-generation',
            contents: process.env.stddev + content,
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            }
        });

    for (const part of response.candidates[0].content.parts) {
    // Based on the part type, either show the text or save the image
        if (part.text) {
        console.log(part.text);
        } else if (part.inlineData) {
        const imageData = part.inlineData.data;
        const buffer = Buffer.from(imageData, "base64");
        console.log("image generated");
        return buffer;
        }
    }

    } catch (error) {
        console.error('Error generating actor profile image:', error);
    }
}

export async function initializeAgents(agentInstructions) {
    // Import class Actor to create a new agent

    const actorInstance = new Actor(agentInstructions);
    // Initialize the chat model with the actor's instructions

    return actorInstance;
}

export async function handleChatRequest(userID, agentID, actorInstance, message) {

    // Send the message to the chat model and get the response
    const response = await actorInstance.chat(userID, agentID, message);
    
    // Return the response
    return response;
}

export async function handlePostsRequest(userID, agentID, actorInstance, message) {
    // Send the message to the chat model and get the response
    const response = await actorInstance.posts(userID, agentID, message);
    
}

